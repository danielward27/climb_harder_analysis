# observer that invalidates every second. If timer is active, decrease by one.
observe({
invalidateLater(1000, session)
isolate({
if(active())
{
timer(timer()-1)
if(timer()<1)
{
active(FALSE)
showModal(modalDialog(
title = "Important message",
"Countdown completed!"
))
}
}
})
})
# observers for actionbuttons
observeEvent(input$start, {active(TRUE)})
observeEvent(input$stop, {active(FALSE)})
observeEvent(input$reset, {timer(input$seconds)})
}
shinyApp(ui, server)
library(shiny)
library(lubridate)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel("Hangboard Timer"),
hr(),
actionButton('start','Start'),
actionButton('stop','Stop'),
actionButton('reset','Reset'),
numericInput('seconds','Seconds:',value=10,min=0,max=99999,step=1),
textOutput('timeleft')
)
server <- function(input, output, session) {
# Initialize the timer, 10 seconds, not active.
timer <- reactiveVal(10)
active <- reactiveVal(FALSE)
# Output the time left.
output$timeleft <- renderText({
paste("Time left: ", seconds_to_period(timer()))
})
# observer that invalidates every second. If timer is active, decrease by one.
observe({
invalidateLater(1000, session)
isolate({
if(active())
{
timer(timer()-1)
if(timer()<1)
{
active(FALSE)
showModal(modalDialog(
title = "Important message",
"Countdown completed!"
))
}
}
})
})
# observers for actionbuttons
observeEvent(input$start, {active(TRUE)})
observeEvent(input$stop, {active(FALSE)})
observeEvent(input$reset, {timer(input$seconds)})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel("Hangboard Timer"),
hr(),
tags$head(
tags$style(HTML('#start{background-color:LawnGreen}
#stop{background-color:red}'))
runApp()
runApp()
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel("Hangboard Timer"),
hr(),
actionButton('start','Start', ),
actionButton('stop','Stop'),
actionButton('reset','Reset'),
numericInput('seconds','Time between hangs:', value=240, min=0,max=99999, step=1),
textOutput('Time to hang:')
)
runApp()
runApp()
runApp()
runApp()
hangs = rep(c("Front Lever", "Front Three",
"Half Crimp", "Pinch Block", "Half Crimp"), 2)
hangs
len(hangs)
legthn(hangs)
length(hangs)
nhangs = length(hangs)
nhangs
?hr()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("beepr")
library(beepr)
beep()
beep()
beep(sound = 1)
beep(sound = 2)
beep(sound = 3)
beep(sound = 4)
beep(sound = 5)
beep(sound = 6)
beep(sound = 7)
beep(sound = 8)
beep(sound = 9)
beep(sound = 10)
beep(sound = 10)
beep(sound = 11)
beep(sound = 12)
beep(sound = 13)
beep(sound = 14)
beep(sound = 15)
beep(sound = 16)
beep(sound = 117)
alarm()
alarm()
library(beep)
install.packages(beep)
install.packages("beep")
library(beep)
library(beep)
install.packages("beep")
beep(sound = 117)
beep(sound = 1)
beep(sound = 1)
runApp()
runApp()
runApp()
beep(sound = 1)
beep(sound = 2)
beep(sound = 3)
beep(sound = 4)
beep(sound = 5)
beep(sound = 6)
beep(sound = 7)
beep(sound = 8)
beep(sound = 9)
beep(sound = 10)
beep(sound = 10)
beep(sound = 10)
beep(sound = 10)
beep(sound = 10)
beep(sound = 10)
beep(sound = 10)
beep(sound = 11)
beep(sound = 12)
beep(sound = 10)
beep(sound = 10)
beep(sound = 1)
beep(sound = 2)
beep(sound = 3)
beep(sound = 4)
beep(sound = 5)
beep(sound = 6)
beep(sound = 7)
beep(sound = 8)
beep(sound = 9)
beep(sound = 10)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
hangs = c("Warm up", rep(c("Front Lever", "Front Three",
hangs = c("Warm up", rep(c("Front Lever", "Front Three",
"Half Crimp", "Pinch Block", "Half Crimp"), 2))
hangs
hangs = c("Warm up", rep(c("Front Lever", "Front Three",
"Half Crimp", "Pinch Block", "Half Crimp"), 2))
hangs
exercise = c("Warm Up", rep(c("Front Lever", "Front Three", "Half Crimp",
"Pinch Block", "Half Crimp"), 2),
"Face Pulls", "External Rotations")
interval = 10
nexercise = length(exercise)
exercise = c("Warm Up", rep(c("Front Lever", "Front Three", "Half Crimp",
"Pinch Block", "Half Crimp"), 2),
"Face Pulls", "External Rotations")
interval = 10
nexercise = length(exercise)
nexercise
beep(sound = 1)
beep(sound = 2)
beep(sound = 3)
beep(sound = 4)
beep(sound = 4, beep(sound(3))
auto_invalidate = reactiveTimer(1000, session)
# observer that invalidates every second. If timer is active, decrease by one.
observe({
auto_invalidate()
isolate({
if(active()){
output$hang <- renderText({
paste("Next hang: ", exercise[i])
})
timer(timer()-1)
if (timer()<6 & timer()>0){
beep(sound = 10)
}
if(timer()==0)
{
beep(sound = 1)
i=i+1
timer()
if (i==nexercise){
}
}
}
})
})
#active(FALSE)
#showModal(modalDialog(
#  title = "Important message",
#  "Countdown completed!"))
# observers for actionbuttons
observeEvent(input$start, {active(TRUE)})
observeEvent(input$stop, {active(FALSE)})
observeEvent(input$reset, {timer(input$interval)})
}
shinyApp(ui, server)
beep(sound = 4, beep(sound(3)))
beep(sound = 4, beep(sound = 3)))
beep(sound = 4, beep(sound = 3))
beep(sound = 4)
beep(sound = 4)
wait(1)
beep(sound = 4)
sys.sleep(1)
beep(sound = 3)
eep(sound = 4)
Sys.sleep(1)
beep(sound = 3)
beep(sound = 3)
beep(sound = 4)
Sys.sleep(1)
beep(sound = 3)
beep(sound = 5)
beep(sound = 6)
beep(sound = 7)
beep(sound = 8)
beep(sound = 9)
beep(sound = 2)
beep(sound = 2)
beep(sound = 3)
beep(sound = 1)
beep(sound = 2)
beep(sound = 10)
beep(sound = 2)
beep(sound = 2)
beep(sound = 4)
Sys.sleep(1)
beep(sound = 3)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
beep(sound = 10)
beep(sound = 9)
beep(sound = 7)
beep(sound = 6)
beep(sound = 5)
beep(sound = 4)
beep(sound = 3)
beep(sound = 2)
beep(sound = 2)
beep(sound = 2)
beep(sound = 2)
beep(sound = 2)
beep(sound = 2)
beep(sound = 1)
beep(sound = 3)
beep(sound = 10)
beep(sound = 2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyUI(pageWithSidebar(
#  Application title
headerPanel("Shiny Survey Tool v.01"),
sidebarPanel(
# This is intentionally an empty object.
h6(textOutput("save.results")),
h5("Created by:"),
tags$a("Econometrics by Simulation",
href="http://www.econometricsbysimulation.com"),
h5("For details on how data is generated:"),
tags$a("Blog Post",
href=paste0("http://www.econometricsbysimulation.com/",
"2013/19/Shiny-Survey-Tool.html")),
h5("Github Repository:"),
tags$a("Survey-Tool",
href=paste0("https://github.com/EconometricsBySimulation/",
"Shiny-Demos/tree/master/Survey")),
# Display the page counter text.
h5(textOutput("counter"))
),
# Show a table summarizing the values entered
mainPanel(
# Main Action is where most everything is happenning in the
# object (where the welcome message, survey, and results appear)
uiOutput("MainAction"),
# This displays the action putton Next.
actionButton("Click.Counter", "Next")
)
))
runApp('~/delete_me2')
runApp()
runApp('~/delete_me2')
runApp()
runApp('~/delete_me2')
runApp()
runApp('~/delete_me2')
runApp('~/delete_me2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
titlePanel("Hangboard Timer"),
hr(),
# numericInput('Bodyweight'),
numericInput('interval','Time between exercise / s:', value=interval, min=0,max=99999, step=1),
actionButton('start','Start'),
actionButton('stop','Stop'),
actionButton('reset','Reset'),
textOutput('hang'),
textOutput('time_to_ex'),
div(class = 'container',
div(class = 'col-sm-2'),
div(class = 'col-sm-8',
numericInput('extime', 'Time / s:', value=0, min=0, max=10, step=0.5),
br()
)
),
div(class = 'container',
div(class = 'col-sm-2'),
div(class = 'col-sm-8',
numericInput('exweight', 'Weight / kg:', value=0, min=-100, max=100, step=0.5),
actionButton("submit", "Submit"),
br()
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
exercises = c(rep(c("Front Lever", "Front Three", "Half Crimp",
"Pinch Block", "Half Crimp"), 2),
"Face Pulls", "External Rotations")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny); runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
results_df = tibble("exercises" = character(), "hand" = character(),
"time" = numeric(), "weight" = numeric(),
"date" = as.character(Sys.Date()))
results_df
results_df = tibble("exercises" = character(), "hand" = character(),
"time" = numeric(), "weight" = numeric(),
"date" = as.character(Sys.Date()))
results_df
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
results_df
rbind(results_df, c(1,2,3,4,5)))
rbind(results_df, c(1,2,3,4,5))
tibble("a"=1, "b"=2)
colnames(results_df)
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
